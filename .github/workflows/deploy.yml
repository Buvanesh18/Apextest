name: Salesforce Build Pipeline - QA

on:
  push:
    branches:
      - build/QA

permissions:
  contents: read
  pull-requests: write

jobs:
  salesforce-deploy:
    runs-on: ubuntu-latest
    environment: QA

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🛠️ Install Salesforce CLI and Plugins (sf + sfdx)
        shell: bash
        run: |
          echo 'Installing sf CLI'
          npm install -g @salesforce/cli@latest

          echo 'Installing sfdx-git-delta plugin'
          echo y | sfdx plugins:install sfdx-git-delta

      - name: 🔐 Authenticate with Salesforce (JWT Auth)
        run: |
          sf org login jwt \
            --client-id ${{ secrets.SF_CONSUMER_KEY }} \
            --jwt-key-file Assets/server.key \
            --username ${{ secrets.SF_USERNAME }} \
            --instance-url https://login.salesforce.com \
            --set-default

      - name: 📦 Prepare Delta Package
        run: |
          mkdir -p delta
          npx sfdx sgd:source:delta --to "HEAD" --from "HEAD~1" --output "delta" --generate-delta

      - name: 📂 Debug Delta Output
        run: |
          echo "🔍 Checking delta contents..."
          ls -R delta || echo "⚠️ Delta folder is empty"

      - name: 👤 Get Commit Author Email
        shell: pwsh
        env:
          GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
        run: ./scripts/gitAuthorMail.ps1

      - name: 🔍 Detect Changed Apex Classes
        shell: pwsh
        run: ./scripts/detectChangedApex.ps1

      - name: 🚀 Deploy Delta to QA Org
        if: env.HAS_APEX_CHANGES == 'true'
        run: |
          sf project deploy start --source-dir delta/force-app --target-org ${{ secrets.SF_USERNAME }} --wait 10

      - name: 🧪 Run Related Apex Tests (Async)
        shell: pwsh
        run: ./scripts/runRelatedTests.ps1

      - name: 📧 Send Apex Test Report Email
        if: env.HAS_APEX_CHANGES == 'true'
        shell: pwsh
        env:
          USERNAME: ${{ vars.EMAIL_USERNAME }}
          PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          GIT_AUTHOR_EMAIL: ${{ env.gitAuthorEmail }}
        run: ./scripts/sendTestReportEmail.ps1

